{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","newtask","setnewtask","task","settask","className","type","placeholder","onChange","event","target","value","class","onClick","oldtask","map","taskvalue","index","id","filter","arrele","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAAe,I,YC2DAA,MAvDf,WAAgB,IAAD,EAEiBC,qBAFjB,mBAENC,EAFM,KAEGC,EAFH,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,KAyBb,OACE,mCACE,qBAAKC,UAAY,YAAjB,SACE,sBAAKA,UAAY,WAAjB,UACE,uBACA,2CACA,uBACA,uBAAOC,KAAM,OAAOC,YAAa,cAAcC,SA3BrC,SAACC,GACfP,EAAWO,EAAMC,OAAOC,QA0BkDA,MAAQV,IAE5E,mBAAGW,MAAM,qBAAqBC,QAzBrB,WACfT,GAAQ,SAACU,GACP,MAAM,GAAN,mBAAUA,GAAV,CAAkBb,OAEpBC,EAAW,OAsBP,6BAEEC,EAAKY,KAAI,SAACC,EAAUC,GAClB,OAAQ,sBAAKZ,UAAU,OAAf,UACN,mBAAGA,UAAU,sBACXQ,QAAW,kBAzBPK,EAyBwBD,OAvB1Cb,GAAQ,SAACU,GACP,OAAOA,EAAQK,QAAO,SAACC,EAAQH,GAC7B,OAAOA,GAAQC,QAJF,IAACA,KA2BN,6BAAKF,oBClCNK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.34960400.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [newtask, setnewtask] = useState();\n  const [task, settask] = useState([]);\n\n  const inputtask = (event) => {\n      setnewtask(event.target.value);\n  };\n\n  const addNewtask = () =>{\n      settask((oldtask) =>{\n        return[...oldtask,newtask];\n      });\n      setnewtask(\"\");\n  };\n  const removetask = (id) =>{\n\n    settask((oldtask) =>{\n      return oldtask.filter((arrele, index)=>{\n        return index!= id;\n      }\n      );\n    });\n  }\n\n  return (\n    <>\n      <div className = \"container\">\n        <div className = \"containt\">\n          <br/>\n          <h1>ToDo List</h1>\n          <br/>\n          <input type =\"text\" placeholder =\" Add a Task\" onChange = {inputtask} value ={newtask}/>\n\n            <i class=\"fas fa-plus-circle\" onClick = {addNewtask}></i>\n          <ol>\n            {\n            task.map((taskvalue,index) =>{\n              return (<div className=\"task\">\n                <i className=\"fas fa-times-circle\"\n                  onClick = {() => removetask(index)}\n                  ></i>\n                <li>{taskvalue}</li>\n                </div>)\n              \n              ;\n            })\n          }\n          </ol>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}